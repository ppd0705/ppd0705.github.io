<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on PPD&#39;s blog</title>
    <link>https://ppd0705.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on PPD&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Dec 2020 11:50:33 +0800</lastBuildDate><atom:link href="https://ppd0705.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL自问自答</title>
      <link>https://ppd0705.github.io/post/mysql_qa/</link>
      <pubDate>Thu, 24 Dec 2020 11:50:33 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mysql_qa/</guid>
      <description>1. redo log 和bin log的区别？ binlog属于服务层日志，记录的是SQL的原始逻辑，主要用来归档；而redo log属于InnoDB引擎特有的日</description>
    </item>
    
    <item>
      <title>[笔记]MySQL实战45讲</title>
      <link>https://ppd0705.github.io/post/mysql_in_action/</link>
      <pubDate>Tue, 25 Aug 2020 21:05:35 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mysql_in_action/</guid>
      <description>第一讲：一条SQL查询语句的执行过程 MySQL架构 Server层 连接器： 管理连接，权限验证 分析器：词法分析，语法分析 优化器：索引选择，joi</description>
    </item>
    
    <item>
      <title>MySQL事务隔离</title>
      <link>https://ppd0705.github.io/post/mysql_transaction_isolation/</link>
      <pubDate>Mon, 02 Dec 2019 22:00:57 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mysql_transaction_isolation/</guid>
      <description>四种隔离级别 读未提交(read uncommitted)： 事务还未提交时能被其他事务看到 读提交(read committed)： 事务提交后才能被</description>
    </item>
    
    <item>
      <title>MySQL协议初探及pymysql源码节选</title>
      <link>https://ppd0705.github.io/post/mysql_procotol_1/</link>
      <pubDate>Wed, 04 Sep 2019 01:10:03 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mysql_procotol_1/</guid>
      <description>总体交互过程 登录流程 TCP连接建立 1 2 3 4 5 # Connection.connection sock = socket.create_connection((host, port),connection_timeout) sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1) sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1) _rfile = _makefile(sock, &amp;#39;rb&amp;#39;) Server向Client发送Handshake packet：包</description>
    </item>
    
  </channel>
</rss>
