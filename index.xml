<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PPD&#39;s blog</title>
    <link>https://ppd0705.github.io/</link>
    <description>Recent content on PPD&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Jul 2019 21:53:34 +0800</lastBuildDate>
    
        <atom:link href="https://ppd0705.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java_basic_2</title>
      <link>https://ppd0705.github.io/post/java_basic_2/</link>
      <pubDate>Mon, 29 Jul 2019 21:53:34 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/java_basic_2/</guid>
      
        <description>

&lt;h4 id=&#34;string&#34;&gt;String&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;不可变&lt;/li&gt;
&lt;li&gt;使用Unicode编码表示&lt;/li&gt;
&lt;li&gt;早期JDK以char[]存储，新版本用byte[]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;stringbuilder&#34;&gt;StringBuilder&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;可变对象，新增字符时，不会创建新的临时对象&lt;/li&gt;
&lt;li&gt;append方法返回this，故可以链式调用&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;stringjoiner&#34;&gt;StringJoiner&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用于分隔符拼接数据&lt;/li&gt;
&lt;li&gt;底层使用的仍是StringBuilder&lt;/li&gt;
&lt;li&gt;无需指定开头结尾时可用String.join()方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;包装类型&#34;&gt;包装类型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;基本类型的封装，可赋值为null&lt;/li&gt;
&lt;li&gt;编译器可Auto Boxing自动封箱(如 Integer n = 100 -&amp;gt; Integer n = Integer.valueOf(100))、Auto Unboxing自动拆箱(如 int x = n -&amp;gt; int x = n.intValue())&lt;/li&gt;
&lt;li&gt;为不可变类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;javabean&#34;&gt;JavaBean&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;符合命名规范的class, 通过getter和setter来读写属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;enum枚举&#34;&gt;enum枚举&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;继承自Enum, static final类型，无法被继承，无法new&lt;/li&gt;
&lt;li&gt;.ordinal()返回定义顺序&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;常用工具类&#34;&gt;常用工具类&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Math 提供数学方法&lt;/li&gt;
&lt;li&gt;Random 伪随机数&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java_basic_1</title>
      <link>https://ppd0705.github.io/post/java_basic_1/</link>
      <pubDate>Sat, 27 Jul 2019 21:49:48 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/java_basic_1/</guid>
      
        <description>

&lt;hr /&gt;

&lt;h5 id=&#34;碎碎念-最近总算给自己打气开始了解java语言-以下均来自廖雪峰java教程的笔记&#34;&gt;碎碎念： 最近总算给自己打气开始了解Java语言。以下均来自廖雪峰Java教程的笔记&lt;/h5&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;基本单位为class&#34;&gt;基本单位为class&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;通常大写字母开头&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;基本变量类型&#34;&gt;基本变量类型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;整数： byte, short, int, long&lt;/li&gt;
&lt;li&gt;浮点数： float, double&lt;/li&gt;
&lt;li&gt;字符类型： char&lt;/li&gt;
&lt;li&gt;布尔类型: boolean&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;常量&#34;&gt;常量&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;定义变量时加finnal修饰符&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;var关键字&#34;&gt;var关键字&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;var sb = new StringBuilder() 等价于 StringBuilder sb = new StringBuilder()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;字符串类型&#34;&gt;字符串类型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;字符串是个引用类型&lt;/li&gt;
&lt;li&gt;使用+连接任意字符串和其他数据类型&lt;/li&gt;
&lt;li&gt;空值为null&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;数据&#34;&gt;数据&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;有默认值，整型是0，浮点型是0.0，布尔型是false&lt;/li&gt;
&lt;li&gt;空间大小不可变，长度用.length 获取&lt;/li&gt;
&lt;li&gt;初始化指定值： int[] ns = { 68, 79, 91, 85, 62 }&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;判断是否相等&#34;&gt;判断是否相等&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;引用类型 == 判断是否指向同一个对象， .equals 判断值是否相等，null.equals会报错NullPointerException&lt;/li&gt;
&lt;li&gt;浮点数a,b 用Math.abs(a-b) &amp;lt; tolerence判断相等&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;类的构造&#34;&gt;类的构造&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;构造方法名称和类名相同&lt;/li&gt;
&lt;li&gt;未定义时，编译器自动创建一个无参数的构造方法&lt;/li&gt;
&lt;li&gt;可以定义多个参数方法，编译器根据参数自动判断&lt;/li&gt;
&lt;li&gt;一个构造方法可以调用另一个构造方法，以便代码复用&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;类的方法重载-overload&#34;&gt;类的方法重载（overload）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;方法名相同，但参数不同&lt;/li&gt;
&lt;li&gt;功能相似&lt;/li&gt;
&lt;li&gt;返回类型应相同&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;类的继承&#34;&gt;类的继承&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;关键字extends&lt;/li&gt;
&lt;li&gt;最基础的类Object&lt;/li&gt;
&lt;li&gt;一个类有且只有一个父类,除了没有父类的Object之外&lt;/li&gt;
&lt;li&gt;private -&amp;gt; protected 可使属性让子类可访问&lt;/li&gt;
&lt;li&gt;实例化类时，会先实例化父类即调用super()&lt;/li&gt;
&lt;li&gt;upcasting向上转型： ParentClass p = new ChildrenClass()&lt;/li&gt;
&lt;li&gt;downcasting向下转型： ChildrenClass c = (ChildrenClass) p&lt;/li&gt;
&lt;li&gt;判断类型 instanceof: c instanceof ParentClass&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;类的多态&#34;&gt;类的多态&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;概念： 针对某个类的方法调用，其真正执行的方法取决于运行时期对应的实际类&lt;/li&gt;
&lt;li&gt;Override覆写：与父类方法名相同，且参数和返回类型也相同。 可使用@Override显示声明&lt;/li&gt;
&lt;li&gt;final

&lt;ul&gt;
&lt;li&gt;final修饰的方法可以阻止被覆写&lt;/li&gt;
&lt;li&gt;final修饰的class可以阻止被继承&lt;/li&gt;
&lt;li&gt;final修饰的field必须在创建对象时初始化，随后不可修改
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;类的抽象&#34;&gt;类的抽象&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用abstract声明，用于定义接口规范&lt;/li&gt;
&lt;li&gt;抽象类不可实例化&lt;/li&gt;
&lt;li&gt;抽象方法必须被子类覆写&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;接口&#34;&gt;接口&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用interface声明， 类似于一个没有字段，都是抽象方法的抽象类&lt;/li&gt;
&lt;li&gt;所有方法默认为 public abstract&lt;/li&gt;
&lt;li&gt;接口用extends声明继承接口&lt;/li&gt;
&lt;li&gt;具体的类用implements声明实现接口&lt;/li&gt;
&lt;li&gt;一个类可以实现多个接口&lt;/li&gt;
&lt;li&gt;default方法不需要被覆写&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;静态字段&#34;&gt;静态字段&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用static声明，所有实例共享，推荐用 &lt;code&gt;类&lt;/code&gt;.&lt;code&gt;字段&lt;/code&gt;调用&lt;/li&gt;
&lt;li&gt;接口可以定义静态字段，为public static final类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;静态方法&#34;&gt;静态方法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用static声明，所有实例共享，只能访问静态字段，不能访问this，常用于工具函数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;包&#34;&gt;包&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;声明： 文件首行 package 路径&lt;/li&gt;
&lt;li&gt;导入： import path.Class&lt;/li&gt;
&lt;li&gt;简单类名查找顺序：当前package -&amp;gt; 导入的package -&amp;gt; java.lang&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;作用域&#34;&gt;作用域&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;包作用域是指一个类允许访问同一个package的没有public、private修饰的class，以及没有public、protected、private修饰的字段和方法&lt;/li&gt;
&lt;li&gt;如果不确定是否需要public，就不声明为public&lt;/li&gt;
&lt;li&gt;一个.java文件只能包含一个public类，但可以包含多个非public类&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>First</title>
      <link>https://ppd0705.github.io/post/first/</link>
      <pubDate>Fri, 28 Jun 2019 22:14:50 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/first/</guid>
      
        <description>&lt;p&gt;写东西一直就是我不擅长的事情&lt;br /&gt;
语文作文800字总是觉得凑不够&lt;br /&gt;
那就开始写吧&lt;br /&gt;
毕竟我也没有什么擅长的&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://ppd0705.github.io/about/</link>
      <pubDate>Fri, 28 Jun 2019 22:01:49 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/about/</guid>
      
        <description>&lt;p&gt;湖南人&lt;br /&gt;
生于1992&lt;br /&gt;
合肥屯溪路男子职业技术学校打铁专业毕业&lt;br /&gt;
在常州第一大流水线工厂画了近2年图&lt;br /&gt;
又跌跌撞撞在深圳开始当起了码农&lt;br /&gt;
世界太大我太渺小&lt;br /&gt;
就做个饥饿的傻子吧&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
