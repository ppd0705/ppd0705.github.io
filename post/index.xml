<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PPD&#39;s blog</title>
    <link>https://ppd0705.github.io/post/</link>
    <description>Recent content in Posts on PPD&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 Aug 2020 21:05:35 +0800</lastBuildDate>
    
	<atom:link href="https://ppd0705.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[笔记]MySQL实战45讲</title>
      <link>https://ppd0705.github.io/post/mysql_in_action/</link>
      <pubDate>Tue, 25 Aug 2020 21:05:35 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mysql_in_action/</guid>
      <description>第一讲：一条SQL查询语句的执行过程 MySQL架构 Server层 连接器： 管理连接，权限验证 分析器：词法分析，语法分析 优化器：索引选择，joi</description>
    </item>
    
    <item>
      <title>[笔记]Pydantic</title>
      <link>https://ppd0705.github.io/post/pydantic_note/</link>
      <pubDate>Thu, 23 Jul 2020 08:06:35 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/pydantic_note/</guid>
      <description>简介 pydantic是一个基于type hint 的类型检查库 使用 Model 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from typing import Optional from datetime import datetime from pydantic import BaseModel, Field class User(BaseModel): id:int name:str = &amp;#34;PPD&amp;#34; age: int = None hometown:</description>
    </item>
    
    <item>
      <title>[笔记]GoogleSRE</title>
      <link>https://ppd0705.github.io/post/google_sre/</link>
      <pubDate>Sun, 05 Jul 2020 22:24:16 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/google_sre/</guid>
      <description>第一部分 第一章 SRE(site reliability engineering): 设计和研发大型、分不出计算机系统。有时和研发团队工作，其他时候开发基础组件，推广这些基础组件在多个项目中复用。 SRE关注</description>
    </item>
    
    <item>
      <title>[笔记]C# 基本语法</title>
      <link>https://ppd0705.github.io/post/csharp_notes/</link>
      <pubDate>Mon, 25 May 2020 22:44:02 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/csharp_notes/</guid>
      <description>前言：最近在维护一个获取http接口的数据然后填充到Excel的工具，于是接触到了C#，总体感觉下来，C#关键字多，语法多，功能强大，LIN</description>
    </item>
    
    <item>
      <title>Lua基本使用</title>
      <link>https://ppd0705.github.io/post/lua_introduction/</link>
      <pubDate>Wed, 08 Apr 2020 20:32:24 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/lua_introduction/</guid>
      <description>前言：最近在了解API网关apisix， 其中的配置都是用的lua, 于是开始了解lua。 语法 注释 行注释 -- 块注释 1 2 3 --[[块 注释 --]] 变量 布尔类</description>
    </item>
    
    <item>
      <title>Starlette源码笔记</title>
      <link>https://ppd0705.github.io/post/starlette_note/</link>
      <pubDate>Thu, 12 Mar 2020 22:46:27 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/starlette_note/</guid>
      <description>简介 Starlette是一个轻量的基于ASGI协议的web框架, 一个简单app如下： 1 2 3 4 5 6 7 8 async def app(scope, recieve, send): assert scope[&amp;#34;type&amp;#34;] == &amp;#34;http&amp;#34; body = b&amp;#34;hello: &amp;#34; request = Request(scope, recieve) async for chunk</description>
    </item>
    
    <item>
      <title>Uvicorn源码笔记</title>
      <link>https://ppd0705.github.io/post/uvicorn_note/</link>
      <pubDate>Wed, 04 Mar 2020 08:25:53 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/uvicorn_note/</guid>
      <description>简介 Unicorn是一个遵守ASGI协议的web服务器，使用asycnio框架，要求python3.6+，支持HTTP1.1和WebSock</description>
    </item>
    
    <item>
      <title>ASGI摘抄</title>
      <link>https://ppd0705.github.io/post/asgi_note/</link>
      <pubDate>Wed, 04 Mar 2020 08:25:38 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/asgi_note/</guid>
      <description>Asynchronous Server Gateway Interface Onverview two components protocol server: terminates socket and translates them into connections and per-connection event messages application: lives in inside a server, is instantiated once per connection, and handles event messages as they happen difference between two components applications are instant objects that are fed events rather than simple callable, and must run as asyncio-compativle corountines two separate parts of a connection: a connection scope; events</description>
    </item>
    
    <item>
      <title>gunicorn笔记</title>
      <link>https://ppd0705.github.io/post/gunicorn_note/</link>
      <pubDate>Thu, 20 Feb 2020 21:29:37 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/gunicorn_note/</guid>
      <description>简介 gunicorn是一遵守WSGI协议的web服务器， 其整体架构是Master/Workers模型。master进程通过信号机制管理wor</description>
    </item>
    
    <item>
      <title>Saul</title>
      <link>https://ppd0705.github.io/post/saul/</link>
      <pubDate>Sat, 01 Feb 2020 12:20:47 +0700</pubDate>
      
      <guid>https://ppd0705.github.io/post/saul/</guid>
      <description>前言：为了记录我认识的Saul, 于是有了这篇 今年春节在柬埔寨的大象自然公园做了一周志愿者，去的初衷其中一方面的原因是想近距离接触一下这个只在</description>
    </item>
    
    <item>
      <title>Go语言基础笔记</title>
      <link>https://ppd0705.github.io/post/go_basic/</link>
      <pubDate>Sat, 01 Feb 2020 12:00:59 +0700</pubDate>
      
      <guid>https://ppd0705.github.io/post/go_basic/</guid>
      <description>基本组成结构 1 2 3 4 5 6 7 packge main // 包名 import &amp;#34;fmt&amp;#34; /* 导入依赖包 */ fun main() { /* 主函数 */ fmt.Println(&amp;#34;Hello, World!&amp;#34;) } 数据类型 基本类型 布尔型： ture or false 数字类型： int, float32, float64 字符串类型 string 派生类</description>
    </item>
    
    <item>
      <title>柬埔寨大象自然公园的一周</title>
      <link>https://ppd0705.github.io/post/elephant_park/</link>
      <pubDate>Tue, 28 Jan 2020 10:09:11 +0700</pubDate>
      
      <guid>https://ppd0705.github.io/post/elephant_park/</guid>
      <description>缘起 19年国庆时无意在豆瓣上看到一个人写因为母亲去世想排解一些内心的伤痛而去泰国的大象自然公园度过一周，无意勾起了我对奶奶的思念。这个陪伴我</description>
    </item>
    
    <item>
      <title>MySQL事务隔离</title>
      <link>https://ppd0705.github.io/post/mysql_transaction_isolation/</link>
      <pubDate>Mon, 02 Dec 2019 22:00:57 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mysql_transaction_isolation/</guid>
      <description>四种隔离级别 读未提交(read uncommitted)： 事务还未提交时能被其他事务看到 读提交(read committed)： 事务提交后才能被</description>
    </item>
    
    <item>
      <title>Python标准库io和select</title>
      <link>https://ppd0705.github.io/post/python_io/</link>
      <pubDate>Tue, 05 Nov 2019 06:48:57 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/python_io/</guid>
      <description>三种I/O类型 Binary: expects and produces bytes objects, 不会编解码，不会换行 Text: expects and produces str objects， 自动编解码和换行 Raw(unbuffered): uilding-block for binary and text streams 底层类 抽象基类IOBase: 无read</description>
    </item>
    
    <item>
      <title>Asyncio主要类和方法一览</title>
      <link>https://ppd0705.github.io/post/asyncio/</link>
      <pubDate>Tue, 05 Nov 2019 06:22:00 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/asyncio/</guid>
      <description>events Handle 基本属性： loop, context, call_back, args run: 执行call_back TimeHandle: 带有when到期时间的handle,也用于来比较大小 AbstractServer: 抽象server, 定义start_se</description>
    </item>
    
    <item>
      <title>Python标准库heapq</title>
      <link>https://ppd0705.github.io/post/python_standard_libary_heapq/</link>
      <pubDate>Mon, 28 Oct 2019 01:24:40 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/python_standard_libary_heapq/</guid>
      <description>底层设计: 完全二叉树（除了最后一层，其他层都是满的，最后一层的节点都靠左排列） 每个节点的值都小于等于左右子节点的值 使用list存储 入堆hea</description>
    </item>
    
    <item>
      <title>Python标准库之并发相关库</title>
      <link>https://ppd0705.github.io/post/python_standard_libary_1/</link>
      <pubDate>Sun, 27 Oct 2019 15:26:47 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/python_standard_libary_1/</guid>
      <description>threading Lock: 可被其他线程释放 .RLock: 与Lock的区别在于可被锁拥有者多次获取，只能被被锁拥有者释放，释放次数等于获取次数才算完全释放 Condition: condition实</description>
    </item>
    
    <item>
      <title>Python标准库functools</title>
      <link>https://ppd0705.github.io/post/functools/</link>
      <pubDate>Mon, 21 Oct 2019 04:17:14 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/functools/</guid>
      <description>functools主要有3个函数：partial, wraps, lru_cache partial: 利用一个类装饰器把现函数和参数保存起来, 后续调用的时候再补充和更新参数 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>Redis协议初探及redis-py源码节选</title>
      <link>https://ppd0705.github.io/post/redis_procotol_1/</link>
      <pubDate>Sat, 05 Oct 2019 20:28:20 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/redis_procotol_1/</guid>
      <description>通讯协议 基于TCP协议 数据以\r\n分隔，数据类型五种，按第一个字节来区分 simple string: ”+“， 状态回复 1 +OK\r\n error: &amp;ldquo;-&amp;ldquo;， 错误回复</description>
    </item>
    
    <item>
      <title>Mongo协议初探及pymongo源码节选</title>
      <link>https://ppd0705.github.io/post/mongo_procotol_1/</link>
      <pubDate>Sat, 05 Oct 2019 11:21:34 +0800</pubDate>
      
      <guid>https://ppd0705.github.io/post/mongo_procotol_1/</guid>
      <description>通讯协议 组成 head: 消息头 payload length(int32): 消息长度 request_id(int32)： 请求ID response_to(int32): 服务端响应对应请求的reques_id(请求类型为OP_QUE</description>
    </item>
    
  </channel>
</rss>